# Initialize cluster:
kubeadm init --pod-network-cidr=10.244.0.0/16
mkdir -p $HOME/.kube
cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
chown $(id -u):$(id -g) $HOME/.kube/config

# Get all namespaces:
kubectl get pods --all-namespaces

# List nodes:
kubectl get nodes

#
# Begin steps for setting up Kubernetes Master (as root) on CentOS:
# 
vim /etc/fstab
swapoff -a
yum install docker
systemctl enable docker
systemctl start docker

cat > /etc/yum.repos.d/kubernetes.repo << EOF
[kubernetes]
name=Kubernetes
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
EOF
	
setenforce 0
vim /etc/selinux/config (change to permissive)
yum install kubelet kubeadm kubectl -y
systemctl enable kubelet
systemctl start kubelet

cat > /etc/sysctl.d/k8s.conf << EOF
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
EOF

sysctl --system

# Initialize Master
kubeadm init --pod-network-cidr=10.244.0.0/16 --apiserver-advertise-address=192.168.56.102
# Run 3 commands as normal user (exit from root) from the output
$ kubectl get nodes (should respond with master NotReady)
$ kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/v0.9.1/Documentation/kube-flannel.yml
$ kubectl get nodes (should result in master ready)

#
# End of steps for setting up Kubernetes Master
#

kubectl get pods --all-namespaces
kubectl get nodes

# Create deployment:
kubectl create -f <filename>.yaml

# List deployments
kubectl get deployDescribe ments

# Describe deployment
kubectl describe deployment <name-of-deployment>

# Get yaml file from existing deployment:
kubectl get deployment <name-of-deployment> -o yaml

# Deploy new version of the image (Rollout) with one cmd:
kubectl set image deployment/nginx-deployment nginx=nginx:1.8

# Check the status of rollout deployment:
kubectl rollout status deployment/nginx-deployment
# then describe deployment

# -- Deployment process --
#  Example on nginx-deployment
#
# 1. Apply deployment file:
kubectl apply -f nginx-deployment.yaml
# 2. Check the status:
kubectl rollout status deployment/nginx-deployment
# NOTE: if it's waiting for rollout to finish, follow next steps:
# 3. Describe deployment:
kubectl describe deployments
# 4. Check revision history:
kubectl rollout history deployment/nginx-deployment --revision=3
# 5. Revert changes to previous revision:
kubectl rollout undo deployment/nginx-deployment --to-revision=2

# Create configmaps:
kubectl create configmap my-map --from-literal=school=ErnestTest
# get maps:
kubectl get configmaps
# describe configmaps:
kubectl describe configmap <map-name>
# get configmap in yaml format:
kubectl get configmaps <map-name> -o yaml

# Pull values from maps into pods using yaml
# -- cat pod-config.yaml
$ cat pod-config.yaml
apiVersion: v1
kind: Pod
metadata:
  name: config-test-pod
spec:
  containers:
    - name: test-container
      image: busybox
      command: [ "/bin/sh", "-c", "env" ]
      env:
        - name: WHAT_SCHOOL
          valueFrom:
            configMapKeyRef:
              name: my-map
              key:  school
  restartPolicy: Never

# Create pod using yaml file:
kubectl create -f pod-config.yaml

# list pods and their ip addresses
kubectl get pods -o wide

# get logs from pod:
kubectl logs <pod-name>

# get token from master with command for joining workers
kubeadm token create --print-join-command

# get deamon sets:
kubectl get daemonsets -n kube-system

# describe deamonsets:
kubectl describe daemonset kube-flannel-ds -n kube-system
